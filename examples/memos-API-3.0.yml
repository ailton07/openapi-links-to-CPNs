openapi: 3.0.0
info:
  description: A privacy-first, lightweight note-taking service.
  title: memos API
  contact:
    name: API Support
    url: https://github.com/orgs/usememos/discussions
  license:
    name: MIT License
    url: https://github.com/usememos/memos/blob/main/LICENSE
  version: '1.0'
paths:
  /api/v1/memo:
    get:
      tags:
        - memo
      summary: Get a list of memos matching optional filters
      operationId: getMemos
      parameters:
        - description: Creator ID
          name: creatorId
          in: query
          schema:
            type: integer
        - description: Creator username
          name: creatorUsername
          in: query
          schema:
            type: string
        - description: Row status
          name: rowStatus
          in: query
          schema:
            type: string
            enum:
              - NORMAL
              - ARCHIVED
        - description: Pinned
          name: pinned
          in: query
          schema:
            type: boolean
        - description: 'Search for tag. Do not append #'
          name: tag
          in: query
          schema:
            type: string
        - description: Search for content
          name: content
          in: query
          schema:
            type: string
        - description: Limit
          name: limit
          in: query
          schema:
            type: integer
        - description: Offset
          name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Memo list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/store.Memo'
          links:
            getMemo:
              operationId: patchMemo
              parameters:
                memoId: '$response.body#/id'
        '400':
          description: Missing user to find memo
        '500':
          description: >-
            Failed to get memo display with updated ts setting value | Failed to
            fetch memo list | Failed to compose memo response
    post:
      description: |-
        Visibility can be PUBLIC, PROTECTED or PRIVATE
        *You should omit fields to use their default values
      tags:
        - memo
      operationId: createMemo
      summary: Create a memo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.CreateMemoRequest'
        description: Request object.
        required: true
      responses:
        '200':
          description: Stored memo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.Memo'
        '400':
          description: Malformatted post memo request | Content size overflow, up to 1MB
        '401':
          description: Missing user in session
        '404':
          description: 'User not found | Memo not found: %d'
        '500':
          description: >-
            Failed to find user setting | Failed to unmarshal user setting value
            | Failed to find system setting | Failed to unmarshal system setting
            | Failed to find user | Failed to create memo | Failed to create
            activity | Failed to upsert memo resource | Failed to upsert memo
            relation | Failed to compose memo | Failed to compose memo response
  /api/v1/memo/{memoId}:
    get:
      tags:
        - memo
      summary: Get memo by ID
      operationId: getMemoByID
      parameters:
        - description: Memo ID
          name: memoId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Memo list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/store.Memo'
        '400':
          description: 'ID is not a number: %s'
        '401':
          description: Missing user in session
        '403':
          description: >-
            this memo is private only | this memo is protected, missing user in
            session
        '404':
          description: 'Memo not found: %d'
        '500':
          description: 'Failed to find memo by ID: %v | Failed to compose memo response'
    delete:
      tags:
        - memo
      summary: Delete memo by ID
      operationId: deleteMemoByID
      parameters:
        - description: Memo ID to delete
          name: memoId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Memo deleted
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: 'ID is not a number: %s'
        '401':
          description: Missing user in session | Unauthorized
        '404':
          description: 'Memo not found: %d'
        '500':
          description: 'Failed to find memo | Failed to delete memo ID: %v'
    patch:
      description: |-
        Visibility can be PUBLIC, PROTECTED or PRIVATE
        *You should omit fields to use their default values
      tags:
        - memo
      summary: Update a memo
      operationId: patchMemo
      parameters:
        - description: ID of memo to update
          name: memoId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.PatchMemoRequest'
        description: Patched object.
        required: true
      responses:
        '200':
          description: Stored memo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/store.Memo'
        '400':
          description: >-
            ID is not a number: %s | Malformatted patch memo request | Content
            size overflow, up to 1MB
        '401':
          description: Missing user in session | Unauthorized
        '404':
          description: 'Memo not found: %d'
        '500':
          description: >-
            Failed to find memo | Failed to patch memo | Failed to upsert memo
            resource | Failed to delete memo resource | Failed to compose memo
            response
externalDocs:
  description: Find out more about Memos.
  url: https://usememos.com/
components:
  schemas:
    getter.HTMLMeta:
      type: object
      properties:
        description:
          type: string
        image:
          type: string
        title:
          type: string
    github_com_usememos_memos_store.UserSetting:
      type: object
      properties:
        key:
          type: string
        userID:
          type: integer
        value:
          type: string
    profile.Profile:
      type: object
      properties:
        mode:
          description: Mode can be "prod" or "dev" or "demo"
          type: string
        version:
          description: Version is the current version of server
          type: string
    store.FieldMapping:
      type: object
      properties:
        displayName:
          type: string
        email:
          type: string
        identifier:
          type: string
    store.IdentityProvider:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/store.IdentityProviderConfig'
        id:
          type: integer
        identifierFilter:
          type: string
        name:
          type: string
        type:
          $ref: '#/components/schemas/store.IdentityProviderType'
    store.IdentityProviderConfig:
      type: object
      properties:
        oauth2Config:
          $ref: '#/components/schemas/store.IdentityProviderOAuth2Config'
    store.IdentityProviderOAuth2Config:
      type: object
      properties:
        authUrl:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        fieldMapping:
          $ref: '#/components/schemas/store.FieldMapping'
        scopes:
          type: array
          items:
            type: string
        tokenUrl:
          type: string
        userInfoUrl:
          type: string
    store.IdentityProviderType:
      type: string
      enum:
        - OAUTH2
      x-enum-varnames:
        - IdentityProviderOAuth2Type
    store.Memo:
      type: object
      properties:
        content:
          description: Domain specific fields
          type: string
        createdTs:
          type: integer
        creatorID:
          type: integer
        id:
          type: integer
        pinned:
          description: Composed fields
          type: boolean
        relationList:
          type: array
          items:
            $ref: '#/components/schemas/store.MemoRelation'
        resourceIDList:
          type: array
          items:
            type: integer
        rowStatus:
          description: Standard fields
          allOf:
            - $ref: '#/components/schemas/store.RowStatus'
        updatedTs:
          type: integer
        visibility:
          $ref: '#/components/schemas/store.Visibility'
    store.MemoRelation:
      type: object
      properties:
        memoID:
          type: integer
        relatedMemoID:
          type: integer
        type:
          $ref: '#/components/schemas/store.MemoRelationType'
    store.MemoRelationType:
      type: string
      enum:
        - REFERENCE
        - ADDITIONAL
      x-enum-varnames:
        - MemoRelationReference
        - MemoRelationAdditional
    store.Resource:
      type: object
      properties:
        blob:
          type: array
          items:
            type: integer
        createdTs:
          type: integer
        creatorID:
          description: Standard fields
          type: integer
        externalLink:
          type: string
        filename:
          description: Domain specific fields
          type: string
        id:
          type: integer
        internalPath:
          type: string
        memoID:
          type: integer
        size:
          type: integer
        type:
          type: string
        updatedTs:
          type: integer
    store.Role:
      type: string
      enum:
        - HOST
        - ADMIN
        - USER
      x-enum-varnames:
        - RoleHost
        - RoleAdmin
        - RoleUser
    store.RowStatus:
      type: string
      enum:
        - NORMAL
        - ARCHIVED
      x-enum-varnames:
        - Normal
        - Archived
    store.Storage:
      type: object
      properties:
        config:
          type: string
        id:
          type: integer
        name:
          type: string
        type:
          type: string
    store.SystemSetting:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        value:
          type: string
    store.User:
      type: object
      properties:
        avatarURL:
          type: string
        createdTs:
          type: integer
        email:
          type: string
        id:
          type: integer
        nickname:
          type: string
        passwordHash:
          type: string
        role:
          $ref: '#/components/schemas/store.Role'
        rowStatus:
          description: Standard fields
          allOf:
            - $ref: '#/components/schemas/store.RowStatus'
        updatedTs:
          type: integer
        username:
          description: Domain specific fields
          type: string
    store.Visibility:
      type: string
      enum:
        - PUBLIC
        - PROTECTED
        - PRIVATE
      x-enum-varnames:
        - Public
        - Protected
        - Private
    v1.CreateIdentityProviderRequest:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/v1.IdentityProviderConfig'
        identifierFilter:
          type: string
        name:
          type: string
        type:
          $ref: '#/components/schemas/v1.IdentityProviderType'
    v1.CreateMemoRequest:
      type: object
      properties:
        content:
          type: string
        createdTs:
          type: integer
        relationList:
          type: array
          items:
            $ref: '#/components/schemas/v1.UpsertMemoRelationRequest'
        resourceIdList:
          description: Related fields
          type: array
          items:
            type: integer
        visibility:
          description: Domain specific fields
          allOf:
            - $ref: '#/components/schemas/v1.Visibility'
    v1.CreateResourceRequest:
      type: object
      properties:
        externalLink:
          type: string
        filename:
          type: string
        internalPath:
          type: string
        type:
          type: string
    v1.CreateStorageRequest:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/v1.StorageConfig'
        name:
          type: string
        type:
          $ref: '#/components/schemas/v1.StorageType'
    v1.CreateUserRequest:
      type: object
      properties:
        email:
          type: string
        nickname:
          type: string
        password:
          type: string
        role:
          $ref: '#/components/schemas/v1.Role'
        username:
          type: string
    v1.CustomizedProfile:
      type: object
      properties:
        appearance:
          description: Appearance is the server default appearance.
          type: string
        description:
          description: Description is the server description.
          type: string
        externalUrl:
          description: >-
            ExternalURL is the external url of server. e.g.
            https://usermemos.com
          type: string
        locale:
          description: Locale is the server default locale.
          type: string
        logoUrl:
          description: LogoURL is the url of logo image.
          type: string
        name:
          description: Name is the server name, default is `memos`
          type: string
    v1.DeleteTagRequest:
      type: object
      properties:
        name:
          type: string
    v1.FieldMapping:
      type: object
      properties:
        displayName:
          type: string
        email:
          type: string
        identifier:
          type: string
    v1.IdentityProvider:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/v1.IdentityProviderConfig'
        id:
          type: integer
        identifierFilter:
          type: string
        name:
          type: string
        type:
          $ref: '#/components/schemas/v1.IdentityProviderType'
    v1.IdentityProviderConfig:
      type: object
      properties:
        oauth2Config:
          $ref: '#/components/schemas/v1.IdentityProviderOAuth2Config'
    v1.IdentityProviderOAuth2Config:
      type: object
      properties:
        authUrl:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        fieldMapping:
          $ref: '#/components/schemas/v1.FieldMapping'
        scopes:
          type: array
          items:
            type: string
        tokenUrl:
          type: string
        userInfoUrl:
          type: string
    v1.IdentityProviderType:
      type: string
      enum:
        - OAUTH2
      x-enum-varnames:
        - IdentityProviderOAuth2Type
    v1.MemoRelationType:
      type: string
      enum:
        - REFERENCE
        - ADDITIONAL
      x-enum-varnames:
        - MemoRelationReference
        - MemoRelationAdditional
    v1.PatchMemoRequest:
      type: object
      properties:
        content:
          description: Domain specific fields
          type: string
        createdTs:
          description: Standard fields
          type: integer
        relationList:
          type: array
          items:
            $ref: '#/components/schemas/v1.UpsertMemoRelationRequest'
        resourceIdList:
          description: Related fields
          type: array
          items:
            type: integer
        rowStatus:
          $ref: '#/components/schemas/v1.RowStatus'
        updatedTs:
          type: integer
        visibility:
          $ref: '#/components/schemas/v1.Visibility'
    v1.Role:
      type: string
      enum:
        - HOST
        - ADMIN
        - USER
      x-enum-varnames:
        - RoleHost
        - RoleAdmin
        - RoleUser
    v1.RowStatus:
      type: string
      enum:
        - NORMAL
        - ARCHIVED
      x-enum-varnames:
        - Normal
        - Archived
    v1.SSOSignIn:
      type: object
      properties:
        code:
          type: string
        identityProviderId:
          type: integer
        redirectUri:
          type: string
    v1.SignIn:
      type: object
      properties:
        password:
          type: string
        username:
          type: string
    v1.SignUp:
      type: object
      properties:
        password:
          type: string
        username:
          type: string
    v1.StorageConfig:
      type: object
      properties:
        s3Config:
          $ref: '#/components/schemas/v1.StorageS3Config'
    v1.StorageS3Config:
      type: object
      properties:
        accessKey:
          type: string
        bucket:
          type: string
        endPoint:
          type: string
        path:
          type: string
        region:
          type: string
        secretKey:
          type: string
        urlPrefix:
          type: string
        urlSuffix:
          type: string
    v1.StorageType:
      type: string
      enum:
        - S3
      x-enum-varnames:
        - StorageS3
    v1.SystemSetting:
      type: object
      properties:
        description:
          type: string
        name:
          $ref: '#/components/schemas/v1.SystemSettingName'
        value:
          description: Value is a JSON string with basic value.
          type: string
    v1.SystemSettingName:
      type: string
      enum:
        - server-id
        - secret-session
        - allow-signup
        - disable-password-login
        - disable-public-memos
        - max-upload-size-mib
        - additional-style
        - additional-script
        - customized-profile
        - storage-service-id
        - local-storage-path
        - telegram-bot-token
        - memo-display-with-updated-ts
        - auto-backup-interval
      x-enum-varnames:
        - SystemSettingServerIDName
        - SystemSettingSecretSessionName
        - SystemSettingAllowSignUpName
        - SystemSettingDisablePasswordLoginName
        - SystemSettingDisablePublicMemosName
        - SystemSettingMaxUploadSizeMiBName
        - SystemSettingAdditionalStyleName
        - SystemSettingAdditionalScriptName
        - SystemSettingCustomizedProfileName
        - SystemSettingStorageServiceIDName
        - SystemSettingLocalStoragePathName
        - SystemSettingTelegramBotTokenName
        - SystemSettingMemoDisplayWithUpdatedTsName
        - SystemSettingAutoBackupIntervalName
    v1.SystemStatus:
      type: object
      properties:
        additionalScript:
          description: Additional script.
          type: string
        additionalStyle:
          description: Additional style.
          type: string
        allowSignUp:
          description: |-
            System settings
            Allow sign up.
          type: boolean
        autoBackupInterval:
          description: Auto Backup Interval.
          type: integer
        customizedProfile:
          description: Customized server profile, including server name and external url.
          allOf:
            - $ref: '#/components/schemas/v1.CustomizedProfile'
        dbSize:
          type: integer
        disablePasswordLogin:
          description: Disable password login.
          type: boolean
        disablePublicMemos:
          description: Disable public memos.
          type: boolean
        host:
          $ref: '#/components/schemas/v1.User'
        localStoragePath:
          description: Local storage path.
          type: string
        maxUploadSizeMiB:
          description: Max upload size.
          type: integer
        memoDisplayWithUpdatedTs:
          description: Memo display with updated timestamp.
          type: boolean
        profile:
          $ref: '#/components/schemas/profile.Profile'
        storageServiceId:
          description: Storage service ID.
          type: integer
    v1.UpdateIdentityProviderRequest:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/v1.IdentityProviderConfig'
        identifierFilter:
          type: string
        name:
          type: string
        type:
          $ref: '#/components/schemas/v1.IdentityProviderType'
    v1.UpdateResourceRequest:
      type: object
      properties:
        filename:
          type: string
    v1.UpdateStorageRequest:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/v1.StorageConfig'
        name:
          type: string
        type:
          $ref: '#/components/schemas/v1.StorageType'
    v1.UpdateUserRequest:
      type: object
      properties:
        avatarUrl:
          type: string
        email:
          type: string
        nickname:
          type: string
        password:
          type: string
        rowStatus:
          $ref: '#/components/schemas/v1.RowStatus'
        username:
          type: string
    v1.UpsertMemoOrganizerRequest:
      type: object
      properties:
        pinned:
          type: boolean
    v1.UpsertMemoRelationRequest:
      type: object
      properties:
        relatedMemoId:
          type: integer
        type:
          $ref: '#/components/schemas/v1.MemoRelationType'
    v1.UpsertSystemSettingRequest:
      type: object
      properties:
        description:
          type: string
        name:
          $ref: '#/components/schemas/v1.SystemSettingName'
        value:
          type: string
    v1.UpsertTagRequest:
      type: object
      properties:
        name:
          type: string
    v1.UpsertUserSettingRequest:
      type: object
      properties:
        key:
          $ref: '#/components/schemas/v1.UserSettingKey'
        value:
          type: string
    v1.User:
      type: object
      properties:
        avatarUrl:
          type: string
        createdTs:
          type: integer
        email:
          type: string
        id:
          type: integer
        nickname:
          type: string
        role:
          $ref: '#/components/schemas/v1.Role'
        rowStatus:
          description: Standard fields
          allOf:
            - $ref: '#/components/schemas/v1.RowStatus'
        updatedTs:
          type: integer
        userSettingList:
          type: array
          items:
            $ref: '#/components/schemas/v1.UserSetting'
        username:
          description: Domain specific fields
          type: string
    v1.UserSetting:
      type: object
      properties:
        key:
          $ref: '#/components/schemas/v1.UserSettingKey'
        userId:
          type: integer
        value:
          type: string
    v1.UserSettingKey:
      type: string
      enum:
        - locale
        - appearance
        - memo-visibility
        - telegram-user-id
      x-enum-varnames:
        - UserSettingLocaleKey
        - UserSettingAppearanceKey
        - UserSettingMemoVisibilityKey
        - UserSettingTelegramUserIDKey
    v1.Visibility:
      type: string
      enum:
        - PUBLIC
        - PROTECTED
        - PRIVATE
      x-enum-varnames:
        - Public
        - Protected
        - Private